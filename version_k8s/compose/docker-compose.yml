version: "3.8"

services:
  caddy:
    image: caddy:2
    build:
      context: .
      dockerfile: Dockerfile-caddy
    restart: unless-stopped
    volumes:
      - ./docker/Caddyfile:/etc/caddy/Caddyfile
      - caddy-data:/data
    ports:
      - "80:80"
      - "443:443"
      - "5555:5555"
      - "8080:8080"

  web:
    # dhis2/core:2.39.1.2
    # image: "dhis2/core-dev:latest"
    image: "${DHIS2_IMAGE:-dhis2/core:2.40.0.1}"
    # image: "${DHIS2_IMAGE:-dhis2/core-dev:local}"
    # No need to expose ports, as we are using a reverse proxy, even for local port 8080
    ports:
      - 8080:8080 # DHIS2
    #   - 127.0.0.1:8081:8081 # Debugger: connect using commandline flag -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:8081
    #   - 127.0.0.1:9010:9010 # JMX port (for example for VisualVM)
    volumes:
      - ./docker/dhis.conf:/opt/dhis2/dhis.conf:ro
      - ./docker/log4j2.xml:/opt/dhis2/log4j2.xml:ro
    environment:
      JAVA_OPTS:
        "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:8081 \
        -Dlog4j2.configurationFile=/opt/dhis2/log4j2.xml
        -Dcom.sun.management.jmxremote \
        -Dcom.sun.management.jmxremote.port=9010 \
        -Dcom.sun.management.jmxremote.local.only=false \
        -Dcom.sun.management.jmxremote.authenticate=false \
        -Dcom.sun.management.jmxremote.ssl=false"
    depends_on:
      db:
        condition: service_healthy

  db:
    image: ghcr.io/baosystems/postgis:12-3.3
    # No need to expose ports the web container connects to the db container directly
    ports:
      - 127.0.0.1:5432:5432
    # volumes:
    #   - db-dump:/docker-entrypoint-initdb.d/
    environment:
      POSTGRES_USER: dhis
      POSTGRES_DB: dhis
      POSTGRES_PASSWORD: &postgres_password dhis
      PGPASSWORD: *postgres_password # needed by psql in healthcheck
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'psql --no-password --quiet --username $$POSTGRES_USER postgres://127.0.0.1/$$POSTGRES_DB -p 5432 --command "SELECT ''ok''" > /dev/null',
        ]
      start_period: 120s
      interval: 1s
      timeout: 3s
      retries: 5
    # depends_on:
    #    db-dump: 
    #       condition: service_completed_successfully # make sure the DB dump has been downloaded

  # db-dump:
  #   image: busybox # busybox wget version does not have --no-clobber, so we need to do the [ -f ] test
  #   command: sh -c '[ -f dump.sql.gz ] && echo "dump.sql.gz exists" || wget --output-document dump.sql.gz $$DHIS2_DB_DUMP_URL' # only download file if it does not exist
  #   environment:
  #     # Match the deaful db snapshot to the default DHIS2_IMAGE (2.39.1.2)
  #     DHIS2_DB_DUMP_URL: "${DHIS2_DB_DUMP_URL:-https://databases.dhis2.org/sierra-leone/2.39/dhis2-db-sierra-leone.sql.gz}"
  #   working_dir: /opt/dump
  #   volumes:
  #     - db-dump:/opt/dump

volumes:
  # db-dump:
  caddy-data:
